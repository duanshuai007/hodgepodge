#Linux虚拟地址和物理地址的映射

Linux系统一共有4GB的内存空间(0~0xFFFF_FFFF)  

##用户空间(0-3G)
- 通常情况下，用户进程只能访问用户空间的虚拟地址，不能访问到内核空间。  
- 每个进程的用户空间完全独立，互不干扰，用户进程各自有不同的页表。

##内核空间(3-4G)
- 内核空间由内核负责，不会跟着进程改变，是固定的。  
- 内核空间有自己对应的页表，内核的虚拟空间独立于其他程序。  
- 3G-4G的内核空间中，从低地址到高地址依次为:系统物理内存映射区—隔离带—vmalloc虚拟内存分配区—隔离带—高端内存映射区—专用页面映射区—保留区。   
<img src="https://raw.githubusercontent.com/duanshuai007/hodgepodge/master/pictures/document/Linux/virturl_to_phy.png" style="zoom:200%"/>   



##内核空间内存动态申请

- 主要包括三个函数：`kmalloc()`, `__get_free_pages`, `vmalloc`。

> `kmalloc()`, `__get_free_pages`申请的内存位于物理地址映射区，而且在物理上也是连续的，返回的虚拟地址与真实的物理地址（物理地址是连续的，虚拟地址也是连续的）只有一个固定的偏移，因此存在较简单的转换关系。

> 而`vmalloc`申请的内存位于`vmalloc`虚拟内存分配区（这些区都是以线性地址为度量），它在虚拟内存空间给出一块连续的内存区，实质上，这片连续的虚拟内存在物理内存中并不一定连续，而`vmalloc`申请的虚拟内存和物理内存之间也没有简单的换算关系。因为`vmalloc`申请的在虚拟内存空间连续的内存区在物理内存中并不一定连续，可以想象为了完成`vmalloc`，新的页表需要被建立，因此，调用vmalloc来分配少量内存是不妥的。一般来讲，kmalloc用来分配小于128K的内存，而更大的内存块需要用vmalloc来实现。

> 虚拟地址与物理地址关系
>> 对于内核物理内存映射区的虚拟内存（用`kmalloc()`, `__get_free_pages`申请的），使用`virt_to_phys()`和`phys_to_virt()`来实现物理地址和内核虚拟地址之间的互相转换。它实际上，仅仅做了3G的地址移位。上述方法适用于常规内存（内核物理内存映射区），高端内存的虚拟地址与物理地址之间不存在如此简单的换算关系。因为它涉及到了分离物理页的页表控制机制。  

> ioremap
>>在ARM中，设备的寄存器或者存储块的这部分空间属于内存空间的一部分，我们称之为IO内存。在内核中访问IO内存之前，我们只有IO内存的物理地址，这样是无法通过软件直接访问的，需要首先用ioremap()函数将设备所处的物理地址映射到内核虚拟地址空间（3GB~4GB）。然后，才能根据映射所得到的内核虚拟地址范围，通过访问指令访问这些IO内存资源。在将I/O内存资源的物理地址映射成核心虚地址后，理论上讲我们就可以象读写RAM那样直接读写I/O内存资源了。为了保证驱动程序的跨平台的可移植性，我们应该使用Linux中特定的函数来访问I/O内存资源，而不应该通过指向核心虚地址的指针来访问。
 
> mmap
>> 用mmap映射一个设备，意味着使用户空间的一段地址关联到设备内存上，这使得只要程序在分配的地址范围内进行读取或者写入，实际上就是对设备的访问。这种数据传输是直接的，不需要用到内核空间作为数据转移的中间站。`remap_page_range（）`函数的功能是构造用于映射一段物理地址的新页表，实现了内核空间与用户空间的映射。在内核驱动程序的初始化阶段，通过`ioremap（）`将物理地址映射到内核虚拟空间；在驱动程序的mmap系统调用中，使用`remap_page_range()`将该块ROM映射到用户虚拟空间。这样内核空间和用户空间都能访问这段被映射后的虚拟地址。
 
## 进程空间/内核空间/IO内存  
- 其中，后面两个指的是同一段物理内存区域，只是一个为虚拟地址（内核空间），一个为物理地址（IO内存）。进程空间和内核空间对应着不同的物理地址，它们之间的数据传递，是实际的数据的拷贝。

 

## 进程空间/IO内存  
- 其中，进程空间mmap得到的那段虚拟地址跟IO内存对应着同一段物理地址。这个过程没有额外的数据中转，读写都直接针对硬件的物理地址进行。  
- 一般来讲，小数据量的传输用ioremap()就足够了，
 
## IO内存的一般访问方法
> 首先是调用`request_mem_region()`申请资源，即告诉内核，本驱动正在使用这段物理内存，其他驱动不得访问它们。在设备驱动模块加载或`open()`函数中进行。  

> 接着讲寄存器地址通过`ioremap()`映射到内核空间虚拟地址，之后就可以通过Linux设备访问编程接口访问这些设备的寄存器了。在设备驱动初始化、`write(),read(),ioctl()`函数中进行。  

> 访问完成之后，应对`ioremap()`申请的虚拟地址进行释放，并释放`release_mem_region()`申请的IO内存资源。在设备驱动模块卸载或`release()`函数中进行。  


## 虚拟存储空间布局  
在支持MMU的系统中，当系统做完硬件初始化后就使能MMU功能，这样整个系统就运行在虚拟存储空间中，实现虚拟存储空间到物理存储空间映射功能的是处理器的MMU，而虚拟存储空间与5路存储空间的映射关系则是由Linux内核来管理的。32位系统中物理存储空间占4GB空间，虚拟存储空间同样占4GB空间，Linux把物理空间中实际存在的远远小于4GB的内存空间映射到整个4GB虚拟存储空间中除映射I/O空间之外的全部空间，所以虚拟内存空间远远大于物理内存空间，这就说同一块物理内存可能映射到多处虚拟内存地址空间上，这正是Linux内存管理职责所在。

###说明：
- 线性地址空间：是指Linux系统中从`0x00000000`到`0xFFFFFFFF`整个4GB虚拟存储空间。

> 内核空间：内核空间表示运行在处理器最高级别的超级用户模式（supervisor mode）下的代码或数据，内核空间占用从0xC000000到0xFFFFFFFF的1GB线性地址空间，内核线性地址空间由所有进程共享，但只有运行在内核态的进程才能访问，用户进程可以通过系统调用切换到内核态访问内核空间，进程运行在内核态时所产生的地址都属于内核空间。

> 用户空间：用户空间占用从0x00000000到0xBFFFFFFF共3GB的线性地址空间，每个进程都有一个独立的3GB用户空间，所以用户空间由每个进程独有，但是内核线程没有用户空间，因为它不产生用户空间地址。另外子进程共享（继承）父进程的用户空间只是使用与父进程相同的用户线性地址到物理内存地址的映射关系，而不是共享父进程用户空间。运行在用户态和内核态的进程都可以访问用户空间。

> 内核逻辑地址空间：是指从PAGE_OFFSET到high_memory之间的线性地址空间，是系统物理内存映射区，它映射了全部或部分（如果系统包含高端内存）物理内存。内核逻辑地址空间与图18-4中的系统RAM内存物理地址空间是一一对应的（包括内存孔洞也是一一对应的），内核逻辑地址空间中的地址与RAM内存物理地址空间中对应的地址只差一个固定偏移量，如果RAM内存物理地址空间从0x00000000地址编址，那么这个偏移量就是PAGE_OFFSET。

> 低端内存：内核逻辑地址空间所映射物理内存就是低端内存，低端内存在Linux线性地址空间中始终有永久的一一对应的内核逻辑地址，系统初始化过程中将低端内存永久映射到了内核逻辑地址空间，为低端内存建立了虚拟映射页表。低端内存内物理内存的物理地址与线性地址之间的转换可以通过__pa(x)和__va(x)两个宏来进行，__pa(x)将内核逻辑地址空间的地址x转换成对应的物理地址，相当于__virt_to_phys((unsigned long)(x))，__va(x)则相反，把低端物理内存空间的地址转换成对应的内核逻辑地址，相当于((void *)__phys_to_virt((unsigned long)(x)))。

> 高端内存：低端内存地址之上的物理内存是高端内存，高端内存在Linux线性地址空间中没有没有固定的一一对应的内核逻辑地址，系统初始化过程中不会为这些内存建立映射页表将其固定映射到Linux线性地址空间，而是需要使用高端内存的时候才为分配的高端物理内存建立映射页表，使其能够被内核使用，否则不能被使用。高端内存的物理地址于现行地址之间的转换不能使用上面的__pa(x)和__va(x)宏。

>> 高端内存概念的由来：如上所述，Linux将4GB的线性地址空间划分成两部分，从`0x00000000`到`0xBFFFFFFF`共3GB空间作为用户空间由用户进程独占，这部分线性地址空间并没有固定映射到物理内存空间上；从`0xC0000000`到`0xFFFFFFFF`的第4GB线性地址空间作为内核空间，在嵌入式系统中，这部分线性地址空间除了映射物理内存空间之外还要映射处理器内部外设寄存器空间等I/O空间。0xC0000000~high_memory之间的内核逻辑地址空间专用来固定映射系统中的物理内存，也就是说`0xC0000000`~`high_memory`之间空间大小与系统的物理内存空间大小是相同的（当然在配置了`CONFIG_DISCONTIGMEMD`选项的非连续内存系统中，内核逻辑地址空间和物理内存空间一样可能存在内存孔洞），如果系统中的物理内存容量远小于1GB，那么内核现行地址空间中内核逻辑地址空间之上的`high_memory`~`0xFFFFFFFF`之间还有足够的空间来固定映射一些I/O空间。可是，如果系统中的物理内存容量（包括内存孔洞）小于1GB，那么就没有足够的内核线性地址空间来固定映射系统全部物理内存以及一些I/O空间了，为了解决这个问题，在x86处理器平台设置了一个经验值：896MB，就是说，如果系统中的物理内存（包括内存孔洞）大于896MB，那么将前896MB物理内存固定映射到内核逻辑地址空间0xC0000000~0xC0000000+896MB（=high_memory）上，而896MB之后的物理内存则不建立到内核线性地址空间的固定映射，这部分内存就叫高端物理内存。此时内核线性地址空间high_memory~0xFFFFFFFF之间的128MB空间就称为高端内存线性地址空间，用来映射高端物理内存和I/O空间。896MB是x86处理器平台的经验值，留了128MB线性地址空间来映射高端内存以及I/O地址空间，我们在嵌入式系统中可以根据具体情况修改这个阈值，比如，MIPS中将这个值设置为0x20000000B（512MB），那么只有当系统中的物理内存空间容量大于0x20000000B时，内核才需要配置CONFIG_HIGHMEM选项，使能内核对高端内存的分配和映射功能。什么情况需要划分出高端物理内存以及高端物理内存阈值的设置原则见上面的内存页区（zone）概念说明。

>> 高端线性地址空间：从`high_memory`到0xFFFFFFFF之间的线性地址空间属于高端线性地址空间，其中`VMALLOC_START`~`VMALLOC_END`之间线性地址被`vmalloc()`函数用来分配物理上不连续但线性地址空间连续的高端物理内存，或者被`vmap()`函数用来映射高端或低端物理内存，或者由`ioremap()`函数来重新映射I/O物理空间。`PKMAP_BASE`开始的`LAST_PKMAP`（一般等于1024）页线性地址空间被kmap()函数用来永久映射高端物理内存。`FIXADDR_START`开始的`KM_TYPE_NR*NR_CPUS`页线性地址空间被`kmap_atomic()`函数用来临时映射高端物理内存，其他未用高端线性地址空间可以用来在系统初始化期间永久映射I/O地址空间。

 
```
 作者：Hao Lee
链接：https://www.zhihu.com/question/29918252/answer/163114415
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
```

> 以下讲解都是在 Intel 32 位下，并且以代码段为例 (之所以不讲 64 位是因为在 64-bit long mode 下分段直接被禁用了，内存完全平坦，没什么可以讲的...)在 Intel 平台下，逻辑地址(logical address)是 selector:offset 这种形式，selector 是 CS 寄存器的值，offset 是 EIP 寄存器的值。如果用 selector 去 GDT( 全局描述符表 ) 里拿到 segment base address(段基址) 然后加上 offset(段内偏移)，这就得到了 linear address。我们把这个过程称作段式内存管理。  
如果再把 linear address 切成四段，用前三段分别作为索引去PGD、PMD、Page Table里查表，最终就会得到一个页表项(Page Table Entry)，那里面的值就是一页物理内存的起始地址，把它加上 linear address 切分之后第四段的内容(又叫页内偏移)就得到了最终的 physical address。我们把这个过程称作页式内存管理。  
问题来了，为什么没提到 virtual address，这是个什么东西？其实在 Intel IA-32 手册里并没有提到这个术语，但是在内核的确是用到了这个概念，比如__va和__pa这两个宏定义。经过我的考证，virtual address就是linear address的别名，俩词汇是一个意思，内核代码和我们编程中喜欢用virtual address这个术语，而Intel手册里只用linear address这个术语。这几个概念本身在不同手册的叫法不同，再加上国内很多人东抄西抄，瞎jb翻译写博客把问题复杂化了。
